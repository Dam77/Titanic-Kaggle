{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11011591,"sourceType":"datasetVersion","datasetId":6855907}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Loading Dataset using pandas library\ntrain = pd.read_csv(\"/kaggle/input/titanicdata/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/titanicdata/test.csv\")\n\n# Checking data (Important to understand the context)\nprint(\"Head :\")\nprint(train.head())\nprint(\"info :\")\nprint(train.info())\nprint(\"statistical description :\")\nprint(train.describe())","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.670376Z","iopub.execute_input":"2025-03-13T15:02:22.670756Z","iopub.status.idle":"2025-03-13T15:02:22.718054Z","shell.execute_reply.started":"2025-03-13T15:02:22.670725Z","shell.execute_reply":"2025-03-13T15:02:22.717075Z"}},"outputs":[{"name":"stdout","text":"Head :\n   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \ninfo :\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\nstatistical description :\n       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  \n","output_type":"stream"}],"execution_count":335},{"cell_type":"markdown","source":"**Data Cleaning**","metadata":{}},{"cell_type":"code","source":"#Checking if there's missing data\nprint(train.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.719460Z","iopub.execute_input":"2025-03-13T15:02:22.719786Z","iopub.status.idle":"2025-03-13T15:02:22.726437Z","shell.execute_reply.started":"2025-03-13T15:02:22.719758Z","shell.execute_reply":"2025-03-13T15:02:22.725271Z"}},"outputs":[{"name":"stdout","text":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n","output_type":"stream"}],"execution_count":336},{"cell_type":"markdown","source":"There are missing values from age, Cabin and Embarked\nAge contains 177 missed values, Cabin got 687 and Embarked got 2.\n\n* 177 missed values from age is a little, we can replace missed values by its median.\n* 687 missed values out of 891 from embarked is a lot. I think we can remove those data.\n* 2 missed values from Embarked. That's not significant we can replace it by the most commonly used","metadata":{}},{"cell_type":"markdown","source":"**Replacing Age by its median :**\nAnd why not using mean ? because the mean is influenced by extrem values. Median is more similar to the population","metadata":{}},{"cell_type":"code","source":"# Replacing age missing values by its median\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\n\n# Also the same to test.csv\ntest[\"Age\"] = test[\"Age\"].fillna(train[\"Age\"].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.728708Z","iopub.execute_input":"2025-03-13T15:02:22.729142Z","iopub.status.idle":"2025-03-13T15:02:22.746483Z","shell.execute_reply.started":"2025-03-13T15:02:22.729100Z","shell.execute_reply":"2025-03-13T15:02:22.745372Z"}},"outputs":[],"execution_count":337},{"cell_type":"markdown","source":"**Removing observations where Cabin isn't given** And why removing it ? Because there are too much missing values, and it doesn't mean anything now.","metadata":{}},{"cell_type":"code","source":"# Removing Cabin's column from train and test data frame\ntrain = train.drop(columns=[\"Cabin\"])\ntest = test.drop(columns=[\"Cabin\"])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.748284Z","iopub.execute_input":"2025-03-13T15:02:22.748627Z","iopub.status.idle":"2025-03-13T15:02:22.764391Z","shell.execute_reply.started":"2025-03-13T15:02:22.748598Z","shell.execute_reply":"2025-03-13T15:02:22.763223Z"}},"outputs":[],"execution_count":338},{"cell_type":"markdown","source":"**Remplacing Embarked by its most commonly used** And why ? Embarked column only got 3 possibilities, We'll replace it by the most commonly used, the \"peak\" or \"mode\" in french.","metadata":{}},{"cell_type":"code","source":"# Replacing Embarked missing values by its mode\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(train[\"Embarked\"].mode()[0])\n\n# Same for test data frame\ntest[\"Embarked\"] = test[\"Embarked\"].fillna(test[\"Embarked\"].mode()[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.765702Z","iopub.execute_input":"2025-03-13T15:02:22.766031Z","iopub.status.idle":"2025-03-13T15:02:22.783562Z","shell.execute_reply.started":"2025-03-13T15:02:22.765993Z","shell.execute_reply":"2025-03-13T15:02:22.782215Z"}},"outputs":[],"execution_count":339},{"cell_type":"code","source":"# Replacing one passenger fare missing value test data frame\ntest[\"Fare\"] = test[\"Fare\"].fillna(test[\"Fare\"].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.784827Z","iopub.execute_input":"2025-03-13T15:02:22.785182Z","iopub.status.idle":"2025-03-13T15:02:22.799889Z","shell.execute_reply.started":"2025-03-13T15:02:22.785153Z","shell.execute_reply":"2025-03-13T15:02:22.798734Z"}},"outputs":[],"execution_count":340},{"cell_type":"markdown","source":"**Checking if Data cleaning worked**","metadata":{}},{"cell_type":"code","source":"print(train.isnull().sum())\nprint(test.isnull().sum())\n# We can see that there are are no more missing values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.801985Z","iopub.execute_input":"2025-03-13T15:02:22.802335Z","iopub.status.idle":"2025-03-13T15:02:22.823834Z","shell.execute_reply.started":"2025-03-13T15:02:22.802295Z","shell.execute_reply":"2025-03-13T15:02:22.822489Z"}},"outputs":[{"name":"stdout","text":"PassengerId    0\nSurvived       0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           0\nEmbarked       0\ndtype: int64\nPassengerId    0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           0\nEmbarked       0\ndtype: int64\n","output_type":"stream"}],"execution_count":341},{"cell_type":"markdown","source":"Machine Learning systems can not read and understand datatypes like String. So we must transform our data to numeric types.","metadata":{}},{"cell_type":"code","source":"# Remember which data need to be transformed to be understood by Machine Learning systems\nprint(train.dtypes)\nprint(test.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.825664Z","iopub.execute_input":"2025-03-13T15:02:22.826016Z","iopub.status.idle":"2025-03-13T15:02:22.846549Z","shell.execute_reply.started":"2025-03-13T15:02:22.825985Z","shell.execute_reply":"2025-03-13T15:02:22.845526Z"}},"outputs":[{"name":"stdout","text":"PassengerId      int64\nSurvived         int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nEmbarked        object\ndtype: object\nPassengerId      int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nEmbarked        object\ndtype: object\n","output_type":"stream"}],"execution_count":342},{"cell_type":"markdown","source":"As we can see, Name, Sex, Ticket and Embarked can't be understand by the Machine. Let's transform these data","metadata":{}},{"cell_type":"markdown","source":"* Name could have been removed because it doesn't mean anything by himself. But if we look at it, we can return something interesting : Mr or Miss\n* Sex gotta be transformed into a binary data. 0 if Male, then 1 if Female\n* Ticket is going to be removed from our dataset\n* Embarked got 3 possibles values, No one is better than another -> One hot encoding\n* We will keep Pclass as it is right now. Because the more it is the best it is so it's good right now","metadata":{}},{"cell_type":"code","source":"# Sex\ntrain[\"Sex\"] = train[\"Sex\"].map({\"male\": 0, \"female\": 1})\ntest[\"Sex\"] = test[\"Sex\"].map({\"male\": 0, \"female\": 1})\nprint(train[\"Sex\"].head())\nprint(test[\"Sex\"].head())\nprint(train.head())\nprint(test.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.847628Z","iopub.execute_input":"2025-03-13T15:02:22.848092Z","iopub.status.idle":"2025-03-13T15:02:22.874537Z","shell.execute_reply.started":"2025-03-13T15:02:22.848039Z","shell.execute_reply":"2025-03-13T15:02:22.873442Z"}},"outputs":[{"name":"stdout","text":"0    0\n1    1\n2    1\n3    1\n4    0\nName: Sex, dtype: int64\n0    0\n1    1\n2    0\n3    0\n4    1\nName: Sex, dtype: int64\n   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare Embarked  \n0         A/5 21171   7.2500        S  \n1          PC 17599  71.2833        C  \n2  STON/O2. 3101282   7.9250        S  \n3            113803  53.1000        S  \n4            373450   8.0500        S  \n   PassengerId  Pclass                                          Name  Sex  \\\n0          892       3                              Kelly, Mr. James    0   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)    1   \n2          894       2                     Myles, Mr. Thomas Francis    0   \n3          895       3                              Wirz, Mr. Albert    0   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)    1   \n\n    Age  SibSp  Parch   Ticket     Fare Embarked  \n0  34.5      0      0   330911   7.8292        Q  \n1  47.0      1      0   363272   7.0000        S  \n2  62.0      0      0   240276   9.6875        Q  \n3  27.0      0      0   315154   8.6625        S  \n4  22.0      1      1  3101298  12.2875        S  \n","output_type":"stream"}],"execution_count":343},{"cell_type":"code","source":"# Embarked (One hot encoding)\ntrain = pd.get_dummies(train, columns=[\"Embarked\"], drop_first=True)\ntest = pd.get_dummies(test, columns=[\"Embarked\"], drop_first=True)\nprint(test.head())\nprint(test.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.875783Z","iopub.execute_input":"2025-03-13T15:02:22.876138Z","iopub.status.idle":"2025-03-13T15:02:22.911923Z","shell.execute_reply.started":"2025-03-13T15:02:22.876105Z","shell.execute_reply":"2025-03-13T15:02:22.910894Z"}},"outputs":[{"name":"stdout","text":"   PassengerId  Pclass                                          Name  Sex  \\\n0          892       3                              Kelly, Mr. James    0   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)    1   \n2          894       2                     Myles, Mr. Thomas Francis    0   \n3          895       3                              Wirz, Mr. Albert    0   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)    1   \n\n    Age  SibSp  Parch   Ticket     Fare  Embarked_Q  Embarked_S  \n0  34.5      0      0   330911   7.8292        True       False  \n1  47.0      1      0   363272   7.0000       False        True  \n2  62.0      0      0   240276   9.6875        True       False  \n3  27.0      0      0   315154   8.6625       False        True  \n4  22.0      1      1  3101298  12.2875       False        True  \n   PassengerId  Pclass                                          Name  Sex  \\\n0          892       3                              Kelly, Mr. James    0   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)    1   \n2          894       2                     Myles, Mr. Thomas Francis    0   \n3          895       3                              Wirz, Mr. Albert    0   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)    1   \n\n    Age  SibSp  Parch   Ticket     Fare  Embarked_Q  Embarked_S  \n0  34.5      0      0   330911   7.8292        True       False  \n1  47.0      1      0   363272   7.0000       False        True  \n2  62.0      0      0   240276   9.6875        True       False  \n3  27.0      0      0   315154   8.6625       False        True  \n4  22.0      1      1  3101298  12.2875       False        True  \n","output_type":"stream"}],"execution_count":344},{"cell_type":"code","source":"# What Name column looks like ?\nprint(train[\"Name\"])\n\n# We notice that even if the name doesn't mean anything, we still can take \"Mrs.\", \"Miss.\" etc. This may help our model.\n\n# We will first extract the title by creating a new column\ntrain[\"Title\"] = train[\"Name\"].str.extract(\" ([A-Za-z]+)\\.\", expand=False)\ntest[\"Title\"] = test[\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False)\nprint(train[\"Title\"])\nprint(train[\"Name\"])\n\n# As we can see, we now get a new column named \"Title\". I extracted the name before \".\" thank to \"\\.\" in the previous code","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.912883Z","iopub.execute_input":"2025-03-13T15:02:22.913210Z","iopub.status.idle":"2025-03-13T15:02:22.925495Z","shell.execute_reply.started":"2025-03-13T15:02:22.913183Z","shell.execute_reply":"2025-03-13T15:02:22.924435Z"}},"outputs":[{"name":"stdout","text":"0                                Braund, Mr. Owen Harris\n1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                                 Heikkinen, Miss. Laina\n3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                               Allen, Mr. William Henry\n                             ...                        \n886                                Montvila, Rev. Juozas\n887                         Graham, Miss. Margaret Edith\n888             Johnston, Miss. Catherine Helen \"Carrie\"\n889                                Behr, Mr. Karl Howell\n890                                  Dooley, Mr. Patrick\nName: Name, Length: 891, dtype: object\n0        Mr\n1       Mrs\n2      Miss\n3       Mrs\n4        Mr\n       ... \n886     Rev\n887    Miss\n888    Miss\n889      Mr\n890      Mr\nName: Title, Length: 891, dtype: object\n0                                Braund, Mr. Owen Harris\n1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                                 Heikkinen, Miss. Laina\n3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                               Allen, Mr. William Henry\n                             ...                        \n886                                Montvila, Rev. Juozas\n887                         Graham, Miss. Margaret Edith\n888             Johnston, Miss. Catherine Helen \"Carrie\"\n889                                Behr, Mr. Karl Howell\n890                                  Dooley, Mr. Patrick\nName: Name, Length: 891, dtype: object\n","output_type":"stream"}],"execution_count":345},{"cell_type":"code","source":"print(train.head())\n# We notice we get for the first one \"Mr\", then \"Mrs\" for the second...\n\nprint(train[\"Title\"].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.926853Z","iopub.execute_input":"2025-03-13T15:02:22.927281Z","iopub.status.idle":"2025-03-13T15:02:22.948756Z","shell.execute_reply.started":"2025-03-13T15:02:22.927218Z","shell.execute_reply":"2025-03-13T15:02:22.947846Z"}},"outputs":[{"name":"stdout","text":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare  Embarked_Q  Embarked_S Title  \n0         A/5 21171   7.2500       False        True    Mr  \n1          PC 17599  71.2833       False       False   Mrs  \n2  STON/O2. 3101282   7.9250       False        True  Miss  \n3            113803  53.1000       False        True   Mrs  \n4            373450   8.0500       False        True    Mr  \nTitle\nMr          517\nMiss        182\nMrs         125\nMaster       40\nDr            7\nRev           6\nMlle          2\nMajor         2\nCol           2\nCountess      1\nCapt          1\nMs            1\nSir           1\nLady          1\nMme           1\nDon           1\nJonkheer      1\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":346},{"cell_type":"markdown","source":"Titles like Jonkheer, Don, Mme, Lady... appear only one. All of these rare title are going to be regrouped with the same name","metadata":{}},{"cell_type":"code","source":"title_mapping = {\n    \"Mr\" : \"Mr\", \"Miss\" : \"Miss\", \"Mrs\" : \"Mrs\", \"Master\" : \"Master\", \"Dr\" : \"Dr\", \"Rev\" : \"Rare\", \"Mlle\" : \"Rare\", \"Major\" : \"Rare\", \"Col\" : \"Rare\", \"Countess\" : \"Rare\", \"Capt\" : \"Rare\", \"Ms\" : \"Rare\", \"Sir\" : \"Rare\", \"Lady\" : \"Rare\", \"Mme\" : \"Rare\", \"Don\" : \"Rare\", \"Jonkheer\" : \"Rare\"\n}\ntrain[\"Title\"] = train[\"Title\"].map(title_mapping)\ntest[\"Title\"] = test[\"Title\"].map(title_mapping)\nprint(train[\"Title\"].value_counts())\nprint(train[\"Title\"].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.951392Z","iopub.execute_input":"2025-03-13T15:02:22.951674Z","iopub.status.idle":"2025-03-13T15:02:22.976193Z","shell.execute_reply.started":"2025-03-13T15:02:22.951649Z","shell.execute_reply":"2025-03-13T15:02:22.974696Z"}},"outputs":[{"name":"stdout","text":"Title\nMr        517\nMiss      182\nMrs       125\nMaster     40\nRare       20\nDr          7\nName: count, dtype: int64\nTitle\nMr        517\nMiss      182\nMrs       125\nMaster     40\nRare       20\nDr          7\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":347},{"cell_type":"code","source":"# Checking if our dataset is still logic as usual, using head or columns pandas methods\nprint(train.columns)\nprint(train.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.977822Z","iopub.execute_input":"2025-03-13T15:02:22.978239Z","iopub.status.idle":"2025-03-13T15:02:22.997851Z","shell.execute_reply.started":"2025-03-13T15:02:22.978196Z","shell.execute_reply":"2025-03-13T15:02:22.996569Z"}},"outputs":[{"name":"stdout","text":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Embarked_Q', 'Embarked_S', 'Title'],\n      dtype='object')\n   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare  Embarked_Q  Embarked_S Title  \n0         A/5 21171   7.2500       False        True    Mr  \n1          PC 17599  71.2833       False       False   Mrs  \n2  STON/O2. 3101282   7.9250       False        True  Miss  \n3            113803  53.1000       False        True   Mrs  \n4            373450   8.0500       False        True    Mr  \n","output_type":"stream"}],"execution_count":348},{"cell_type":"code","source":"# Looking great, We now need to \"one hot encoding\" Title column\n\ntrain = pd.get_dummies(train, columns=[\"Title\"], drop_first=True)\ntest = pd.get_dummies(test, columns=[\"Title\"], drop_first=True)\nprint(train.columns)\nprint(test.columns)\nprint(train.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:22.999107Z","iopub.execute_input":"2025-03-13T15:02:22.999463Z","iopub.status.idle":"2025-03-13T15:02:23.029461Z","shell.execute_reply.started":"2025-03-13T15:02:22.999432Z","shell.execute_reply":"2025-03-13T15:02:23.028220Z"}},"outputs":[{"name":"stdout","text":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Embarked_Q', 'Embarked_S', 'Title_Master',\n       'Title_Miss', 'Title_Mr', 'Title_Mrs', 'Title_Rare'],\n      dtype='object')\nIndex(['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch',\n       'Ticket', 'Fare', 'Embarked_Q', 'Embarked_S', 'Title_Master',\n       'Title_Miss', 'Title_Mr', 'Title_Mrs', 'Title_Rare'],\n      dtype='object')\n   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare  Embarked_Q  Embarked_S  Title_Master  \\\n0         A/5 21171   7.2500       False        True         False   \n1          PC 17599  71.2833       False       False         False   \n2  STON/O2. 3101282   7.9250       False        True         False   \n3            113803  53.1000       False        True         False   \n4            373450   8.0500       False        True         False   \n\n   Title_Miss  Title_Mr  Title_Mrs  Title_Rare  \n0       False      True      False       False  \n1       False     False       True       False  \n2        True     False      False       False  \n3       False     False       True       False  \n4       False      True      False       False  \n","output_type":"stream"}],"execution_count":349},{"cell_type":"markdown","source":"Our Dataset is ready because Ticket and Name column won't be used in the model. So all the data are numeric and can be trained by the model.","metadata":{}},{"cell_type":"code","source":"test_ID = test[\"PassengerId\"]\ntrain = train.drop(columns=[\"Name\", \"Ticket\", \"PassengerId\"])\ntest = test.drop(columns=[\"Name\", \"Ticket\", \"PassengerId\"])\n\nprint(train.dtypes)\nprint(test.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:23.030710Z","iopub.execute_input":"2025-03-13T15:02:23.031200Z","iopub.status.idle":"2025-03-13T15:02:23.041165Z","shell.execute_reply.started":"2025-03-13T15:02:23.031163Z","shell.execute_reply":"2025-03-13T15:02:23.040009Z"}},"outputs":[{"name":"stdout","text":"Survived          int64\nPclass            int64\nSex               int64\nAge             float64\nSibSp             int64\nParch             int64\nFare            float64\nEmbarked_Q         bool\nEmbarked_S         bool\nTitle_Master       bool\nTitle_Miss         bool\nTitle_Mr           bool\nTitle_Mrs          bool\nTitle_Rare         bool\ndtype: object\nPclass            int64\nSex               int64\nAge             float64\nSibSp             int64\nParch             int64\nFare            float64\nEmbarked_Q         bool\nEmbarked_S         bool\nTitle_Master       bool\nTitle_Miss         bool\nTitle_Mr           bool\nTitle_Mrs          bool\nTitle_Rare         bool\ndtype: object\n","output_type":"stream"}],"execution_count":350},{"cell_type":"markdown","source":"**Now we are about to divise our dataset from train.csv**\n","metadata":{}},{"cell_type":"markdown","source":"The target value is Survived so we are going to separate it from the others (80% for training and 20% to test it)","metadata":{}},{"cell_type":"code","source":"X_train = train.drop(columns=[\"Survived\"])\nY_train = train[\"Survived\"]\nprint(Y_train.head())\nprint(X_train.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:23.042568Z","iopub.execute_input":"2025-03-13T15:02:23.042947Z","iopub.status.idle":"2025-03-13T15:02:23.067755Z","shell.execute_reply.started":"2025-03-13T15:02:23.042910Z","shell.execute_reply":"2025-03-13T15:02:23.066695Z"}},"outputs":[{"name":"stdout","text":"0    0\n1    1\n2    1\n3    1\n4    0\nName: Survived, dtype: int64\n   Pclass  Sex   Age  SibSp  Parch     Fare  Embarked_Q  Embarked_S  \\\n0       3    0  22.0      1      0   7.2500       False        True   \n1       1    1  38.0      1      0  71.2833       False       False   \n2       3    1  26.0      0      0   7.9250       False        True   \n3       1    1  35.0      1      0  53.1000       False        True   \n4       3    0  35.0      0      0   8.0500       False        True   \n\n   Title_Master  Title_Miss  Title_Mr  Title_Mrs  Title_Rare  \n0         False       False      True      False       False  \n1         False       False     False       True       False  \n2         False        True     False      False       False  \n3         False       False     False       True       False  \n4         False       False      True      False       False  \n","output_type":"stream"}],"execution_count":351},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# Spliting (80-20)\nX_train_sub, X_val, Y_train_sub, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:23.068767Z","iopub.execute_input":"2025-03-13T15:02:23.069110Z","iopub.status.idle":"2025-03-13T15:02:23.090862Z","shell.execute_reply.started":"2025-03-13T15:02:23.069071Z","shell.execute_reply":"2025-03-13T15:02:23.089843Z"}},"outputs":[],"execution_count":352},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Model initiation\nmodel = LogisticRegression(max_iter=1200)\n\n# Training on sub data\nmodel.fit(X_train_sub, Y_train_sub)\n\n# Prediction on val data\nY_pred = model.predict(X_val)\n\n# Exam\naccuracy = accuracy_score(Y_val, Y_pred)\nprint(f\"Precision du modèl : {accuracy}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:02:23.091777Z","iopub.execute_input":"2025-03-13T15:02:23.092124Z","iopub.status.idle":"2025-03-13T15:02:23.202487Z","shell.execute_reply.started":"2025-03-13T15:02:23.092084Z","shell.execute_reply":"2025-03-13T15:02:23.201273Z"}},"outputs":[{"name":"stdout","text":"Precision du modèl : 0.8156424581005587\n","output_type":"stream"}],"execution_count":353},{"cell_type":"markdown","source":"81,5% is correct","metadata":{}},{"cell_type":"code","source":"# Testing it on test.csv\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T15:04:29.463082Z","iopub.execute_input":"2025-03-13T15:04:29.463519Z","iopub.status.idle":"2025-03-13T15:04:29.469561Z","shell.execute_reply.started":"2025-03-13T15:04:29.463488Z","shell.execute_reply":"2025-03-13T15:04:29.468391Z"}},"outputs":[{"name":"stdout","text":"Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare',\n       'Embarked_Q', 'Embarked_S', 'Title_Master', 'Title_Miss', 'Title_Mr',\n       'Title_Mrs', 'Title_Rare'],\n      dtype='object')\nIndex(['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_Q',\n       'Embarked_S', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs',\n       'Title_Rare'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":355}]}